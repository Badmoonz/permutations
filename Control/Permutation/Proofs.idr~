module Control.Permutation.Proofs

import Control.Permutation.Types
import Control.Permutation.Mod
import Data.Fin
import Data.Vect
import Control.Algebra
import Interfaces.Verified
import Data.Vect.Lazy


%access export
%default total

||| Proof that (n + 1)! >= n!
private
factorialIncr : (n : Nat) -> LTE (factorial n) (factorial (S n))
factorialIncr Z = lteRefl
factorialIncr n = lteAddRight (factorial n)

||| Proof that n! >= 1
export
factorialLTE : (n : Nat) -> LTE 1 (factorial n)
factorialLTE Z = lteRefl
factorialLTE (S k) = lteTransitive (factorialLTE k) (factorialIncr k)

add0Permutation : (a : Permutation 0) -> (b : Permutation 0) -> a <+> b =  Nil
add0Permutation [] [] = Refl

add1Permutation : (a : Permutation 1) -> (b : Permutation 1) -> a <+> b =  [FZ]
add1Permutation [FZ] [FZ] = Refl

VerifiedSemigroup (Permutation n) where
  semigroupOpIsAssociative {n = Z} l c r = ?assocZ
  semigroupOpIsAssociative {n = (S Z)} l c r = ?assocSZ
  semigroupOpIsAssociative l c r = ?VerifiedSemigroup_rhs_2
  

---------- Proofs ----------

Control.Permutation.Proofs.assocZ = proof
  intros
  rewrite (sym $ add0Permutation c r)
  rewrite (sym $ add0Permutation l c)
  rewrite (sym $ add0Permutation l [])
  rewrite (sym $ add0Permutation [] r)
  trivial

Control.Permutation.Proofs.assocSZ = proof
  intros
  rewrite (sym $ add1Permutation c r)
  rewrite (sym $ add1Permutation l c)
  rewrite (sym $ add1Permutation l [FZ])
  rewrite (sym $ add1Permutation  [FZ] r)
  trivial


